# https://riggaroo.dev/using-github-actions-to-automate-our-release-process/#:~:text=Now%20to%20actually%20run%20this%20Action%3A%20Log%20onto,name%20and%20number%20of%20the%20release%20to%20create.

name: Create Release Branch

on: 
  workflow_dispatch:
    inputs:
      versionName:
        description: 'Name of version (ie 1.2.3-beta)'
        required: true
      

jobs:
  createrelease:

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: src\CosmosDbExplorer.sln                       # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: src\CosmosDbExplorer.Tests\CosmosDbExplorer.Tests.csproj  # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      # Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      # Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Setup NuGet
      uses: nuget/setup-nuget@v1
      with: 
        nuget-version: '5.7.x'

    - name: Restore NuGet Packages
      run: nuget restore $env:Solution_Name

    - name: Build Application
      run: msbuild $env:Solution_Name /p:Configuration=Release

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    # - name: Decode the pfx
    #   run: |
    #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #     $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #     [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    # - name: Create the app package
    #   run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #   env:
    #     Appx_Bundle: Always
    #     Appx_Bundle_Platforms: x86|x64
    #     Appx_Package_Build_Mode: StoreUpload
    #     Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    # - name: Remove the pfx
    #   run: Remove-Item -path $env:Wap_Project_Directory\$env:Signing_Certificate

    #Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: CosmosDbExplorer.0.0.0
        path: src\CosmosDbExplorer\bin\Release\
