<fluent:RibbonWindow  x:Class="CosmosDbExplorer.MainWindow"
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                      xmlns:views="clr-namespace:CosmosDbExplorer.Views"
                      xmlns:selector="clr-namespace:CosmosDbExplorer.Infrastructure.TemplateSelectors"
                      xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
                      xmlns:pane="clr-namespace:CosmosDbExplorer.Views.Pane"
                      xmlns:fluent="clr-namespace:Fluent;assembly=Fluent"
                      xmlns:markup="clr-namespace:CosmosDbExplorer.Infrastructure.MarkupExtensions"
                      xmlns:clientSdk="clr-namespace:Microsoft.Azure.Documents.Client;assembly=Microsoft.Azure.Documents.Client"
                      xmlns:sdk="clr-namespace:Microsoft.Azure.Documents;assembly=Microsoft.Azure.Documents.Client"
                      mc:Ignorable="d"
                      Loaded="Window_Loaded"
                      Height="850" Width="1200"
                      WindowState="Maximized"
                      DataContext="{Binding Main, Source={StaticResource Locator}}"
                      Cursor="{Binding IsBusy, Converter={markup:CursorExtensionConverter}}"                      
                      Title="{Binding Title}" WindowStartupLocation="CenterScreen">
    <Window.Resources>
        <selector:TabContentTemplateSelector x:Key="tabContentTemplateSelector">
            <selector:TabContentTemplateSelector.DocumentsTemplate>
                <DataTemplate>
                    <views:DocumentsTabView/>
                </DataTemplate>
            </selector:TabContentTemplateSelector.DocumentsTemplate>
            <selector:TabContentTemplateSelector.QueryEditorTemplate>
                <DataTemplate>
                    <views:QueryEditorView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.QueryEditorTemplate>
            <selector:TabContentTemplateSelector.ImportDocumentTemplate>
                <DataTemplate>
                    <views:ImportDocumentView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.ImportDocumentTemplate>
            <selector:TabContentTemplateSelector.DatabaseViewTemplate>
                <DataTemplate>
                    <views:DatabaseView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.DatabaseViewTemplate>
            <selector:TabContentTemplateSelector.StoredProcedureViewTemplate>
                <DataTemplate>
                    <views:StoredProcedureTabView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.StoredProcedureViewTemplate>
            <selector:TabContentTemplateSelector.UserDefFuncViewTemplate>
                <DataTemplate>
                    <views:UserDefFuncTabView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.UserDefFuncViewTemplate>
            <selector:TabContentTemplateSelector.TriggerViewTemplate>
                <DataTemplate>
                    <views:TriggerTabView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.TriggerViewTemplate>
            <selector:TabContentTemplateSelector.ScaleAndSettingsTemplate>
                <DataTemplate>
                    <views:ScaleAndSettingsTabView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.ScaleAndSettingsTemplate>
            <selector:TabContentTemplateSelector.UserEditTempalate>
                <DataTemplate>
                    <views:UserEditView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.UserEditTempalate>
            <selector:TabContentTemplateSelector.PermissionEditTemplate>
                <DataTemplate>
                    <views:PermissionEditView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.PermissionEditTemplate>
            <selector:TabContentTemplateSelector.CollectionMetricsTemplate>
                <DataTemplate>
                    <views:CollectionMetricsTabView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.CollectionMetricsTemplate>
        </selector:TabContentTemplateSelector>

        <selector:StatusBarItemTemplateSelector x:Key="statusBarItemTemplateSelector">
            <selector:StatusBarItemTemplateSelector.UsedMemoryTemplate>
                <DataTemplate>
                    <fluent:StatusBarItem Title="Used memory"
                                  Margin="5,0"
                                  Value="{Binding DataContext.UsedMemory, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}, StringFormat={}{0:##\,000} KB}" />
                </DataTemplate>
            </selector:StatusBarItemTemplateSelector.UsedMemoryTemplate>

            <selector:StatusBarItemTemplateSelector.ZoomTemplate>
                <DataTemplate>
                    <fluent:StatusBarItem Title="Zoom">
                        <Grid DataContext="{Binding DataContext.Value}" Margin="5,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="30" />
                            </Grid.ColumnDefinitions>
                            <Slider x:Name="zoomSlider" Grid.Column="0"
                                    Minimum="0" Maximum="1"
                                    IsDirectionReversed="False"
                                    Style="{DynamicResource ZoomSliderStyle}"
                                    Value="{Binding Zoom, Mode=TwoWay}"
                                    IsSnapToTickEnabled="True"
                                    TickFrequency="0.01"
                                    SmallChange="0.01"
                                    LargeChange="0.5" />

                            <TextBlock Text="{Binding Value, ElementName=zoomSlider, StringFormat={}{0:P0}, Converter={StaticResource logConverter}}"
                                       Grid.Column="1"
                                       HorizontalAlignment="Right"/>
                        </Grid>
                    </fluent:StatusBarItem>
                </DataTemplate>
            </selector:StatusBarItemTemplateSelector.ZoomTemplate>

            <selector:StatusBarItemTemplateSelector.SimpleTextTemplate>
                <DataTemplate>
                    <fluent:StatusBarItem Title="{Binding Title}"
                                          Margin="5,0"
                                          Visibility="{Binding DataContext.IsVisible, Converter={StaticResource boolToVisibilityConverter}}" 
                                          Value="{Binding DataContext.Value}" />
                </DataTemplate>
            </selector:StatusBarItemTemplateSelector.SimpleTextTemplate>

            <selector:StatusBarItemTemplateSelector.ProgressBarTemplate>
                <DataTemplate>
                    <fluent:StatusBarItem Title="{Binding Title}" 
                                          Margin="5,0"
                                          Visibility="{Binding DataContext.IsVisible, Converter={StaticResource boolToVisibilityConverter}}">
                        <StackPanel Orientation="Horizontal">
                            <ProgressBar IsIndeterminate="True" Width="150" Height="12" VerticalAlignment="Center"/>
                            <Button Command="{Binding DataContext.Value}" Margin="3,0" ToolTip="Stop Execution" Height="16"
                                    BorderThickness="0" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
                                    Visibility="{Binding DataContext.IsCancellable, Converter={StaticResource boolToVisibilityConverter}}">
                                <Button.Content>
                                    <Image Source="{StaticResource StopIcon}" />
                                </Button.Content>
                            </Button>
                        </StackPanel>
                    </fluent:StatusBarItem>
                </DataTemplate>
            </selector:StatusBarItemTemplateSelector.ProgressBarTemplate>
            
        </selector:StatusBarItemTemplateSelector>
    </Window.Resources>

    <DockPanel LastChildFill="True">

        <fluent:Ribbon x:Name="ribbon" AutomaticStateManagement="True" DockPanel.Dock="Top"
                       SelectedTabIndex="{Binding SelectedRibbonTab, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
            <fluent:Ribbon.Menu>
                <fluent:Backstage >
                    <fluent:BackstageTabControl>
                        <fluent:Button Header="Add Account" Command="{Binding ShowAccountSettingsCommand}"
                                       Icon="{StaticResource AddConnectionIcon}" 
                                       KeyTip="A"/>

                        <fluent:BackstageTabItem Header="About">
                            <views:AboutView />
                        </fluent:BackstageTabItem>
                        
                        <fluent:SeparatorTabItem />

                        <fluent:Button Header="Exit" Command="{Binding ExitCommand}"
                                       Icon="{StaticResource ExitIcon}"
                                       KeyTip="X"/>
                    </fluent:BackstageTabControl>
                </fluent:Backstage>
            </fluent:Ribbon.Menu>

            <fluent:Ribbon.ContextualGroups>
                <fluent:RibbonContextualTabGroup x:Name="optionsGroup" Header="Options"
                                                 Background="Green" BorderBrush="Green"
                                                 Visibility="{Binding IsRequestOptionsVisible, Mode=TwoWay, Converter={StaticResource boolToVisibilityConverter}}"/>

                <fluent:RibbonContextualTabGroup x:Name="connectionGroup" Header="Connections"
                                                 MinWidth="100"
                                                 Background="Violet" BorderBrush="Violet"
                                                 Visibility="{Binding IsConnectionOptionsVisible, Converter={StaticResource boolToVisibilityConverter}}" />
            </fluent:Ribbon.ContextualGroups>
            
            <fluent:RibbonTabItem Header="Home" KeyTip="H" IsSelected="True">
                <!--<fluent:RibbonGroupBox Header="Account" KeyTip="A"
                                       IsEnabled="{Binding Connection, Converter={StaticResource isNotNullToBooleanConverter}}">
                    <fluent:Button Header="Edit" Command="{Binding Connection.EditConnectionCommand}" />
                    <fluent:Button Header="Remove" Command="{Binding Connection.RemoveConnectionCommand}" />
                </fluent:RibbonGroupBox>-->

                <fluent:RibbonGroupBox KeyTip="C" x:Name="Clipboard"
                                       Header="Clipboard" TabIndex="0">

                    <fluent:Button Header="Paste" 
                                   KeyTip="V"
                                   Command="Paste"
                                   LargeIcon="{StaticResource PasteIcon}"
                                   Icon="{StaticResource PasteIcon}"
                                   FocusManager.IsFocusScope="True">
                        <fluent:Button.ToolTip>
                            <fluent:ScreenTip Title="Paste (Ctrl+V)"
                                              Text="Paste the contents of the Clipboard."
                                              DisableReason="Enable it do use this function"
                                              Width="190" />
                        </fluent:Button.ToolTip>
                    </fluent:Button>

                    <fluent:Button x:Name="cutButton"
                                   KeyTip="X"
                                   Header="Cut"
                                   Icon="{StaticResource CutIcon}"
                                   SizeDefinition="Middle,Small"
                                   Command="Cut"
                                   FocusManager.IsFocusScope="True">
                        <fluent:Button.ToolTip>
                            <fluent:ScreenTip Title="Cut (Ctrl+X)"
                                              Text="Cut the contents to the Clipboard."
                                              DisableReason="Cut is currently not available."
                                              Width="190" />
                        </fluent:Button.ToolTip>
                    </fluent:Button>
                    <fluent:Button x:Name="copyButton"
                                   KeyTip="C"
                                   Header="Copy"
                                   Icon="{StaticResource CopyIcon}"
                                   Command="Copy"
                                   SizeDefinition="Middle,Small"
                                   FocusManager.IsFocusScope="True">
                        <fluent:Button.ToolTip>
                            <fluent:ScreenTip Title="Copy (Ctrl+C)"
                                              Text="Copy the contents to the Clipboard."
                                              DisableReason="Copy is currently not available."
                                              Width="190"/>
                        </fluent:Button.ToolTip>
                    </fluent:Button>
                    <fluent:Button x:Name="findButton"
                                   KeyTip="F"
                                   Header="Find"
                                   Command="ApplicationCommands.Find"
                                   Icon="{StaticResource SearchIcon}"
                                   SizeDefinition="Middle,Small"
                                   FocusManager.IsFocusScope="True">
                        <fluent:Button.ToolTip>
                            <fluent:ScreenTip Title="Find (Ctrl+F)"
                                              Text="Find text in the content."
                                              DisableReason="Find is currently not available."
                                              Width="190"/>
                        </fluent:Button.ToolTip>
                    </fluent:Button>

                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox KeyTip="R" x:Name="Refresh"
                                       Header="Refresh" TabIndex="1"
                                       Visibility="{Binding IsRefreshTabVisible, Mode=TwoWay, Converter={StaticResource boolToVisibilityConverter}}">
                    <fluent:Button Command="{Binding SelectedTab.RefreshCommand}"
                                   Header="Refresh">
                        <fluent:Button.Icon>
                            <TextBlock Style="{StaticResource RefreshIcon}" />
                        </fluent:Button.Icon>
                        <fluent:Button.LargeIcon>
                            <TextBlock Style="{StaticResource RefreshIcon}" FontSize="32" />
                        </fluent:Button.LargeIcon>
                    </fluent:Button>
                </fluent:RibbonGroupBox>
                
                <fluent:RibbonGroupBox KeyTip="D" x:Name="Documents" Header="Documents"
                                       Visibility="{Binding IsTabDocumentsVisible, Mode=TwoWay, Converter={StaticResource boolToVisibilityConverter}}">

                    <fluent:Button Header="Save"
                                   SizeDefinition="Large"
                                   Command="{Binding SelectedTab.SaveDocumentCommand}"
                                   LargeIcon="{StaticResource SaveDocumentIcon}"/>

                    <fluent:Button Header="Discard"
                                   SizeDefinition="Large"
                                   Command="{Binding SelectedTab.DiscardCommand}"
                                   LargeIcon="{StaticResource DiscardIcon}"/>

                    <fluent:Button Header="New Document"
                                   SizeDefinition="Middle,Small"
                                   Command="{Binding SelectedTab.NewDocumentCommand}"
                                   Icon="{StaticResource NewDocumentIcon}" />

                    <fluent:Button Header="Delete Document"
                                   Command="{Binding SelectedTab.DeleteDocumentCommand}"
                                   SizeDefinition="Middle,Small">
                        <fluent:Button.Icon>
                            <TextBlock Style="{StaticResource DeleteIcon}" />
                        </fluent:Button.Icon>
                    </fluent:Button>

                    <fluent:Button Header="Export"
                                   Command="{Binding SelectedTab.SaveLocalCommand}"
                                   SizeDefinition="Middle,Small">
                        <fluent:Button.Icon>
                            <TextBlock Style="{StaticResource IconText}" Text="&#xE78C;" />
                        </fluent:Button.Icon>
                    </fluent:Button>


                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox KeyTip="S" Header="{Binding SelectedTab.Title}"
                                       Visibility="{Binding IsSettingsTabVisible, Mode=TwoWay, Converter={StaticResource boolToVisibilityConverter}}">

                    <fluent:Button Header="Save"
                                   SizeDefinition="Large"
                                   Command="{Binding SelectedTab.SaveCommand}"
                                   LargeIcon="{StaticResource SaveDocumentIcon}"/>

                    <fluent:Button Header="Discard"
                                   SizeDefinition="Large"
                                   Command="{Binding SelectedTab.DiscardCommand}" 
                                   LargeIcon="{StaticResource DiscardIcon}" />

                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox KeyTip="S" Header="{Binding SelectedTab.Title}"
                                       Visibility="{Binding IsAssetTabVisible, Mode=TwoWay, Converter={StaticResource boolToVisibilityConverter}}">

                    <fluent:Button Header="Save"
                                   SizeDefinition="Large"
                                   Command="{Binding SelectedTab.SaveCommand}"
                                   LargeIcon="{StaticResource SaveDocumentIcon}" />

                    <fluent:Button Header="Discard"
                                   SizeDefinition="Large"
                                   Command="{Binding SelectedTab.DiscardCommand}" 
                                   LargeIcon="{StaticResource DiscardIcon}" />

                    <fluent:Button Header="Delete"
                                   Command="{Binding SelectedTab.DeleteCommand}"
                                   SizeDefinition="Large">
                        <fluent:Button.LargeIcon>
                            <TextBlock Style="{StaticResource DeleteIcon}" FontSize="32" />
                        </fluent:Button.LargeIcon>
                    </fluent:Button>

                </fluent:RibbonGroupBox>


                <fluent:RibbonGroupBox KeyTip="S" Header="File"
                                       Visibility="{Binding IsQueryTabVisible, Mode=TwoWay, Converter={StaticResource boolToVisibilityConverter}}">

                    <fluent:Button Header="Open"
                        Command="{Binding SelectedTab.OpenQueryCommand}"
                        SizeDefinition="Large">
                        <fluent:Button.LargeIcon>
                            <TextBlock Style="{StaticResource IconText}" Text="&#xE8E5;" FontSize="32" />
                        </fluent:Button.LargeIcon>
                    </fluent:Button>

                    <fluent:SplitButton Header="Save"                       
                                        SizeDefinition="Large"
                                        Command="{Binding SelectedTab.SaveQueryCommand}"
                                        LargeIcon="{StaticResource SaveDocumentIcon}">
                        <fluent:SplitButton.Items>
                            <MenuItem Header="Save As..." Command="{Binding SelectedTab.SaveQueryCommand}" CommandParameter="SaveAs"/>
                        </fluent:SplitButton.Items>
                    </fluent:SplitButton>
                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox KeyTip="Q" Header="Query"
                                       Visibility="{Binding IsQueryTabVisible, Mode=TwoWay, Converter={StaticResource boolToVisibilityConverter}}">

                    <fluent:Button Header="Run"
                                   Command="{Binding SelectedTab.ExecuteCommand}"
                                   SizeDefinition="Large">
                        <fluent:Button.LargeIcon>
                            <TextBlock Style="{StaticResource IconText}" Text="&#xE768;" FontSize="32" />
                        </fluent:Button.LargeIcon>
                    </fluent:Button>

                    <fluent:Button Header="Export"
                                   Command="{Binding SelectedTab.SaveLocalCommand}"
                                   SizeDefinition="Middle,Small">
                        <fluent:Button.Icon>
                            <TextBlock Style="{StaticResource IconText}" Text="&#xE78C;" FontSize="16" />
                        </fluent:Button.Icon>
                    </fluent:Button>

                    <fluent:Button Header="Next Page"
                                   Command="{Binding SelectedTab.GoToNextPageCommand}"
                                   SizeDefinition="Middle,Small">
                        <fluent:Button.Icon>
                            <TextBlock Style="{StaticResource NextPageIcon}" FontSize="16" />
                        </fluent:Button.Icon>
                    </fluent:Button>

                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox KeyTip="Q" Header="Import"
                                       Visibility="{Binding IsImportTabVisible, Mode=TwoWay, Converter={StaticResource boolToVisibilityConverter}}">

                    <fluent:Button Header="Import"
                                   Command="{Binding SelectedTab.ExecuteCommand}"
                                   SizeDefinition="Large">
                        <fluent:Button.LargeIcon>
                            <TextBlock Style="{StaticResource IconText}" Text="&#xE768;" FontSize="32" />
                        </fluent:Button.LargeIcon>
                    </fluent:Button>

                    <fluent:Button Header="Open Document"
                                   Command="{Binding SelectedTab.OpenFileCommand}"
                                   SizeDefinition="Large">
                        <fluent:Button.LargeIcon>
                            <TextBlock Style="{StaticResource IconText}" Text="&#xE8E5;" FontSize="32" />
                        </fluent:Button.LargeIcon>
                    </fluent:Button>
                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox KeyTip="X" Header="Query Settings"                                        
                                       Visibility="{Binding IsQuerySettingsVisible, Mode=TwoWay, Converter={StaticResource boolToVisibilityConverter}}"
                                       Grid.IsSharedSizeScope="True">

                    <fluent:CheckBox Header="Enable Scan In Query" Icon="{x:Null}"
                                     IsChecked="{Binding SelectedTab.EnableScanInQuery, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                     IsEnabled="{Binding SelectedTab.EnableScanInQuery, Converter={StaticResource nullToEnabledConverter}}">
                        <fluent:CheckBox.ToolTip>
                            <fluent:ScreenTip Title="Enable Cross Partition Query"
                                              Text="Sets the option to enable scans on the queries which couldn't be served as indexing was opted out on the requested paths in the Azure Cosmos DB service."
                                              Width="190" />
                        </fluent:CheckBox.ToolTip>
                    </fluent:CheckBox>

                    <fluent:CheckBox Header="Enable Cross Partition Query" 
                                     IsChecked="{Binding SelectedTab.EnableCrossPartitionQuery, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                     IsEnabled="{Binding SelectedTab.EnableCrossPartitionQuery, Converter={StaticResource nullToEnabledConverter}}">
                        <fluent:CheckBox.ToolTip>
                            <fluent:ScreenTip Title="Enable Cross Partition Query"
                                              Text="Sets a value indicating whether users are enabled to send more than one request to execute the query in the Azure Cosmos DB service. More than one request is necessary if the query is not scoped to single partition key value."
                                              Width="190" />
                        </fluent:CheckBox.ToolTip>
                    </fluent:CheckBox>

                    <fluent:TextBox Header="Partition Key"
                                    Text="{Binding SelectedTab.PartitionKeyValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                    InputWidth="150"/>

                    <fluent:Spinner Header="Max Items" Minimum="-1" Format="N0" Increment="100"
                                    Value="{Binding SelectedTab.MaxItemCount, UpdateSourceTrigger=PropertyChanged}" 
                                    Visibility="{Binding SelectedTab.MaxItemCount, Converter={StaticResource nullToVisibilityConverter}}"
                                    InputWidth="60" Margin="-1"
                                    Size="Large">
                        <fluent:Spinner.ToolTip>
                            <fluent:ScreenTip Title="Max Item Count"
                                              Text="Sets the maximum number of items to be returned in the enumeration operation in the Azure Cosmos DB service."
                                              Width="190" />
                        </fluent:Spinner.ToolTip>
                    </fluent:Spinner>

                    <fluent:Spinner Header="Max DoP" Minimum="-1" Format="N0" Increment="1"
                                    Value="{Binding SelectedTab.MaxDOP, UpdateSourceTrigger=PropertyChanged}" 
                                    Visibility="{Binding SelectedTab.MaxDOP, Converter={StaticResource nullToVisibilityConverter}}"
                                    InputWidth="60" Margin="-1"
                                    Size="Large">
                        <fluent:Spinner.ToolTip>
                            <fluent:ScreenTip Title="Max Degree of Parallelism"
                                              Text="Sets the number of concurrent operations run client side during parallel query execution in the Azure Cosmos DB service. A positive property value limits the number of concurrent operations to the set value. If it is set to less than 0, the system automatically decides the number of concurrent operations to run."
                                              Width="190" />
                        </fluent:Spinner.ToolTip>
                    </fluent:Spinner>

                    <fluent:Spinner Header="Max Buffer" Minimum="-1" Format="N0" Increment="100"                  
                                    Value="{Binding SelectedTab.MaxBufferItem, UpdateSourceTrigger=PropertyChanged}" 
                                    Visibility="{Binding SelectedTab.MaxBufferItem, Converter={StaticResource nullToVisibilityConverter}}"
                                    InputWidth="60" Margin="-1"
                                    Size="Large" >
                        <fluent:Spinner.ToolTip>
                            <fluent:ScreenTip Title="Max Buffer"
                                              Text="Sets the maximum number of items that can be buffered client side during parallel query execution in the Azure Cosmos DB service. A positive property value limits the number of buffered items to the set value. If it is set to less than 0, the system automatically decides the number of items to buffer."
                                              Width="190" />
                        </fluent:Spinner.ToolTip>
                    </fluent:Spinner>

                </fluent:RibbonGroupBox>
                
                <fluent:RibbonGroupBox KeyTip="O" Header="Other" 
                                       Visibility="{Binding IsSystemPropertiesVisible, Mode=TwoWay, Converter={StaticResource boolToVisibilityConverter}}">

                    <fluent:ToggleButton Header="Hide System Properties" 
                                         ToolTip="Show or Hide System Properties"
                                         IsChecked="{Binding SelectedTab.HideSystemProperties, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                         LargeIcon="{StaticResource ShowSystemPropertiesIcon}"/>
                </fluent:RibbonGroupBox>
                                       

            </fluent:RibbonTabItem>

            <fluent:RibbonTabItem Header="Tools" 
                                  Group="{Binding ElementName=connectionGroup, Mode=OneWay}">

                <fluent:RibbonGroupBox KeyTip="T" x:Name="Treeview" Header="Content" TabIndex="0">
                    <fluent:Button Command="{Binding RefreshCommand}"
                                   Header="Refresh">
                        <fluent:Button.Icon>
                            <TextBlock Style="{StaticResource RefreshIcon}" />
                        </fluent:Button.Icon>
                        <fluent:Button.LargeIcon>
                            <TextBlock Style="{StaticResource RefreshIcon}" FontSize="32" />
                        </fluent:Button.LargeIcon>
                    </fluent:Button>

                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox Header="Database" KeyTip="D" TabIndex="1"
                                       IsEnabled="{Binding Database, Converter={StaticResource isNotNullToBooleanConverter}}">
                    <fluent:Button Header="New" 
                                   Command="{Binding Database.AddNewCollectionCommand}"
                                   LargeIcon="{StaticResource DatabaseIcon}"/>

                    <fluent:Button Header="Delete" 
                                   Command="{Binding Database.DeleteDatabaseCommand}">
                        <fluent:Button.LargeIcon>
                            <TextBlock Style="{StaticResource DeleteIcon}" FontSize="32" />
                        </fluent:Button.LargeIcon>
                    </fluent:Button>
                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox KeyTip="O" x:Name="Collection" TabIndex="2"
                                       Header="Collection"
                                       IsEnabled="{Binding Collection, Converter={StaticResource isNotNullToBooleanConverter}}">

                    <fluent:SplitButton x:Name="CreateButton"
                                        KeyTip="A"
                                        Header="Add Item"
                                        LargeIcon="{StaticResource CreateIcon}"
                                        SizeDefinition="Large">
                        <fluent:MenuItem Header="Stored Procedure" Icon="{StaticResource StoredProcedureIcon}" Command="{Binding Collection.NewStoredProcedureCommand}" />
                        <fluent:MenuItem Header="User Definied Function" Icon="{StaticResource UdfIcon}" Command="{Binding Collection.NewUdfCommand}" />
                        <fluent:MenuItem Header="Trigger" Icon="{StaticResource TriggerIcon}" Command="{Binding Collection.NewTriggerCommand}"/>
                    </fluent:SplitButton>

                    <fluent:Button Header="SQL Query" 
                                   Icon="{StaticResource SqlQueryIcon}" 
                                   SizeDefinition="Middle,Small"
                                   Command="{Binding Collection.OpenSqlQueryCommand}"
                                   KeyTip="Q"/>

                    <fluent:Button Header="Import" x:Name="ImportDocuments"
                                   Command="{Binding Collection.OpenImportDocumentCommand}"
                                   SizeDefinition="Middle,Small"
                                   KeyTip="I">
                        <fluent:Button.Icon>
                            <TextBlock Style="{StaticResource ImportDocumentIcon}" />
                        </fluent:Button.Icon>
                    </fluent:Button>

                    <fluent:SplitButton KeyTip="D" Header="Delete"
                                        SizeDefinition="Middle,Small">
                        <fluent:SplitButton.Icon>
                            <TextBlock Style="{StaticResource DeleteIcon}" />
                        </fluent:SplitButton.Icon>

                        <fluent:MenuItem Header="Delete Collection" 
                                   Command="{Binding Collection.DeleteCollectionCommand}">
                            <fluent:MenuItem.Icon>
                                <TextBlock Style="{StaticResource DeleteIcon}" />
                            </fluent:MenuItem.Icon>
                        </fluent:MenuItem>

                        <fluent:MenuItem Header="Remove All Documents (Delete)" 
                                   Icon="{StaticResource RemoveAllIcon}" 
                                   Command="{Binding Collection.ClearAllDocumentsCommand}"
                                   />
                        <fluent:MenuItem Header="Remove All Documents (Recreate)" 
                                   Icon="{StaticResource RemoveAllIcon}" 
                                   Command="{Binding Collection.RecreateAsEmptyCommand}"
                                   />
                    </fluent:SplitButton>

                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox Header="Users" KeyTip="U" TabIndex="3"
                                       IsEnabled="{Binding Users, Converter={StaticResource isNotNullToBooleanConverter}}">

                    <fluent:Button Header="Add User" 
                                   Command="{Binding Users.AddUserCommand}"
                                   LargeIcon="{StaticResource UserIcon}">
                    </fluent:Button>
                        

                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox Header="Permissions" KeyTip="U" TabIndex="3"
                                       IsEnabled="{Binding UserNode, Converter={StaticResource isNotNullToBooleanConverter}}">

                    <fluent:Button Header="Add Permission" 
                                   Command="{Binding UserNode.AddPermissionCommand}"
                                   LargeIcon="{StaticResource PermissionIcon}">
                    </fluent:Button>


                </fluent:RibbonGroupBox>


            </fluent:RibbonTabItem>

            <fluent:RibbonTabItem Header="Request Options"
                                  Group="{Binding ElementName=optionsGroup, Mode=OneWay}">

                <fluent:RibbonGroupBox KeyTip="R" Header="Reset">
                    <fluent:Button Header="Reset Options"
                                   Command="{Binding SelectedTab.ResetRequestOptionsCommand}">
                        <fluent:Button.Icon>
                            <TextBlock Style="{StaticResource RefreshIcon}" />
                        </fluent:Button.Icon>
                        <fluent:Button.LargeIcon>
                            <TextBlock Style="{StaticResource RefreshIcon}" FontSize="32" />
                        </fluent:Button.LargeIcon>
                    </fluent:Button>
                </fluent:RibbonGroupBox>
                

                <fluent:RibbonGroupBox KeyTip="O" Header="Request"                                        
                                       Grid.IsSharedSizeScope="True">
                    <fluent:ComboBox Header="Indexing Directive" Width="250" Margin="1" 
                                     ItemsSource="{Binding Source={markup:EnumBindingSource {x:Type sdk:IndexingDirective}}}"
                                     SelectedValue="{Binding SelectedTab.IndexingDirective, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                     IsEditable="False"/>

                    <fluent:ComboBox Header="Consistency Level" Width="250" Margin="1"
                                     ItemsSource="{Binding Source={markup:EnumBindingSource {x:Type sdk:ConsistencyLevel}}}"
                                     SelectedValue="{Binding SelectedTab.ConsistencyLevel, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                     IsEditable="False"/>

                    <fluent:TextBox Header="Partition Key" Width="250" Margin="1"
                                    Text="{Binding SelectedTab.PartitionKeyValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                </fluent:RibbonGroupBox>


                <fluent:RibbonGroupBox KeyTip="A" Header="Access Condition">
                    <fluent:ComboBox Header="Access Condition" Width="220" Margin="1"
                                     ItemsSource="{Binding Source={markup:EnumBindingSource {x:Type clientSdk:AccessConditionType}}}"
                                     SelectedValue="{Binding SelectedTab.AccessConditionType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                     IsEditable="False"/>

                    <fluent:TextBox Header="ETag" Margin="1"
                                    Text="{Binding SelectedTab.AccessCondition, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox KeyTip="T" Header="Trigger"
                                       Grid.IsSharedSizeScope="True">
                    <fluent:TextBox Header="Pre-Trigger" Width="220" Margin="1"
                                    Text="{Binding SelectedTab.PreTrigger, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                    <fluent:TextBox Header="Post-Trigger" Width="220" Margin="1" 
                                    Text="{Binding SelectedTab.PostTrigger, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                </fluent:RibbonGroupBox>
                
            </fluent:RibbonTabItem>
        </fluent:Ribbon>

        <fluent:StatusBar DockPanel.Dock="Bottom" VerticalAlignment="Center" 
                          ItemsSource="{Binding SelectedTab.StatusBarItems}"
                          ItemTemplateSelector="{StaticResource statusBarItemTemplateSelector}"
                          UsesItemContainerTemplate="True"  >
            <fluent:StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <DockPanel LastChildFill="False" />
                </ItemsPanelTemplate>
            </fluent:StatusBar.ItemsPanel>
            <fluent:StatusBar.ItemContainerStyle>
                <Style TargetType="fluent:StatusBarItem">
                    <Setter Property="DockPanel.Dock" Value="{Binding Dock}" />
                    <Setter Property="Title" Value="{Binding Title}" />
                </Style>
            </fluent:StatusBar.ItemContainerStyle>

        </fluent:StatusBar>

        <xcad:DockingManager DocumentsSource="{Binding Tabs}"
                             AnchorablesSource="{Binding Tools}"
                             ActiveContent="{Binding SelectedTab, Mode=TwoWay, Converter={StaticResource ActiveDocumentConverter}}"
                             LayoutItemTemplateSelector="{StaticResource tabContentTemplateSelector}"
                             DocumentHeaderTemplate="{StaticResource AvalonDockHeaderTemplate}"
                             AllowMixedOrientation="True">

            <xcad:DockingManager.LayoutItemContainerStyleSelector>
                <pane:PaneStyleSelector>
                    <pane:PaneStyleSelector.ToolStyle>
                        <Style TargetType="{x:Type xcad:LayoutAnchorableItem}">
                            <Setter Property="Title" Value="{Binding Model.Header}" />
                            <Setter Property="Visibility" Value="{Binding Model.IsVisible, Mode=TwoWay, Converter={StaticResource DockBoolToVisibilityConverter}, ConverterParameter={x:Static Visibility.Hidden}}"/>
                            <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
                            <Setter Property="IsSelected" Value="{Binding Model.IsSelected, Mode=TwoWay}"/>
                            <Setter Property="IsActive" Value="{Binding Model.IsActive, Mode=TwoWay}" />
                            <Setter Property="CanHide" Value="False" />
                            <Setter Property="CanClose" Value="False" />
                            <Setter Property="IconSource" Value="{Binding Model.IconSource}" />
                        </Style>
                    </pane:PaneStyleSelector.ToolStyle>
                    <pane:PaneStyleSelector.DocumentStyle>
                        <Style TargetType="{x:Type xcad:LayoutItem}">
                            <Setter Property="Title" Value="{Binding Model.Header}"/>
                            <Setter Property="ToolTip" Value="{Binding Model.ToolTip}"/>
                            <Setter Property="CloseCommand" Value="{Binding Model.CloseCommand}"/>
                            <Setter Property="IconSource" Value="{Binding Model.IconSource}"/>
                            <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
                            <Setter Property="IsSelected" Value="{Binding Model.IsSelected, Mode=TwoWay}"/>
                            <Setter Property="IsActive" Value="{Binding Model.IsActive, Mode=TwoWay}" />
                        </Style>
                    </pane:PaneStyleSelector.DocumentStyle>
                </pane:PaneStyleSelector>
            </xcad:DockingManager.LayoutItemContainerStyleSelector>

            <xcad:LayoutRoot x:Name="_layoutRoot">
                <xcad:LayoutPanel Orientation="Horizontal">
                    <xcad:LayoutAnchorablePane Name="Connections" DockWidth="200" FloatingWidth="200" />
                    <xcad:LayoutDocumentPane />
                </xcad:LayoutPanel>
            </xcad:LayoutRoot>

        </xcad:DockingManager>

    </DockPanel>
</fluent:RibbonWindow>
