<fluent:RibbonWindow  x:Class="DocumentDbExplorer.MainWindow"
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                      xmlns:views="clr-namespace:DocumentDbExplorer.Views"
                      xmlns:selector="clr-namespace:DocumentDbExplorer.Infrastructure.TemplateSelectors"
                      xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
                      xmlns:pane="clr-namespace:DocumentDbExplorer.Views.Pane"
                      xmlns:fluent="clr-namespace:Fluent;assembly=Fluent"
                      mc:Ignorable="d"
                      Loaded="Window_Loaded"
                      Height="850" Width="1000"
                      WindowState="Normal"
                      DataContext="{Binding Main, Source={StaticResource Locator}}"
                      Title="{Binding Title}">
    <Window.Resources>
        <selector:TabContentTemplateSelector x:Key="tabContentTemplateSelector">
            <selector:TabContentTemplateSelector.DocumentsTemplate>
                <DataTemplate>
                    <views:DocumentsTabView/>
                </DataTemplate>
            </selector:TabContentTemplateSelector.DocumentsTemplate>
            <selector:TabContentTemplateSelector.QueryEditorTemplate>
                <DataTemplate>
                    <views:QueryEditorView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.QueryEditorTemplate>
            <selector:TabContentTemplateSelector.ImportDocumentTemplate>
                <DataTemplate>
                    <views:ImportDocumentView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.ImportDocumentTemplate>
            <selector:TabContentTemplateSelector.DatabaseViewTemplate>
                <DataTemplate>
                    <views:DatabaseView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.DatabaseViewTemplate>
            <selector:TabContentTemplateSelector.StoredProcedureViewTemplate>
                <DataTemplate>
                    <views:StoredProcedureTabView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.StoredProcedureViewTemplate>
            <selector:TabContentTemplateSelector.UserDefFuncViewTemplate>
                <DataTemplate>
                    <views:UserDefFuncTabView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.UserDefFuncViewTemplate>
            <selector:TabContentTemplateSelector.TriggerViewTemplate>
                <DataTemplate>
                    <views:TriggerTabView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.TriggerViewTemplate>
            <selector:TabContentTemplateSelector.ScaleAndSettingsTemplate>
                <DataTemplate>
                    <views:ScaleAndSettingsTabView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.ScaleAndSettingsTemplate>
            <selector:TabContentTemplateSelector.UserEditTempalate>
                <DataTemplate>
                    <views:UserEditView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.UserEditTempalate>
            <selector:TabContentTemplateSelector.PermissionEditTemplate>
                <DataTemplate>
                    <views:PermissionEditView />
                </DataTemplate>
            </selector:TabContentTemplateSelector.PermissionEditTemplate>
        </selector:TabContentTemplateSelector>

        <selector:DocumentHeaderTemplateSelector x:Key="documentHeaderTemplateSelector">
            <selector:DocumentHeaderTemplateSelector.ImageTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="{Binding IconSource}" Margin="0,0,5,0" VerticalAlignment="Center"/>
                        <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
                    </StackPanel>
                </DataTemplate>
            </selector:DocumentHeaderTemplateSelector.ImageTemplate>

            <selector:DocumentHeaderTemplateSelector.TextIconTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <ContentControl Content="{Binding Content.IconSource}" Margin="0,0,5,0" VerticalAlignment="Center" />
                        <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
                    </StackPanel>
                </DataTemplate>
            </selector:DocumentHeaderTemplateSelector.TextIconTemplate>
        </selector:DocumentHeaderTemplateSelector>

        <selector:StatusBarItemTemplateSelector x:Key="statusBarItemTemplateSelector">
            <selector:StatusBarItemTemplateSelector.UsedMemoryTemplate>
                <DataTemplate>
                    <fluent:StatusBarItem Title="Used memory"
                                  Margin="5,0"
                                  Value="{Binding DataContext.UsedMemory, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}, StringFormat={}{0:##\,000} KB}" />
                </DataTemplate>
            </selector:StatusBarItemTemplateSelector.UsedMemoryTemplate>

            <selector:StatusBarItemTemplateSelector.ZoomTemplate>
                <DataTemplate>
                    <fluent:StatusBarItem Title="Zoom">
                        <Grid DataContext="{Binding DataContext}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="30" />
                            </Grid.ColumnDefinitions>
                            <Slider x:Name="zoomSlider" Grid.Column="0"
                                    Minimum="0" Maximum="1"
                                    IsDirectionReversed="False"
                                    Style="{DynamicResource ZoomSliderStyle}"
                                    Value="{Binding Zoom, Mode=TwoWay}"
                                    IsSnapToTickEnabled="True"
                                    TickFrequency="0.01"
                                    SmallChange="0.01"
                                    LargeChange="0.5" />

                            <TextBlock Text="{Binding Value, ElementName=zoomSlider, StringFormat={}{0:P0}, Converter={StaticResource logConverter}}"
                                       Grid.Column="1"
                                       HorizontalAlignment="Right"/>
                        </Grid>
                    </fluent:StatusBarItem>
                </DataTemplate>
            </selector:StatusBarItemTemplateSelector.ZoomTemplate>

            <selector:StatusBarItemTemplateSelector.SimpleTextTemplate>
                <DataTemplate>
                    <fluent:StatusBarItem Title="{Binding Title}"
                                  Margin="5,0"
                                  Value="{Binding DataContext}" />
                </DataTemplate>
            </selector:StatusBarItemTemplateSelector.SimpleTextTemplate>
        </selector:StatusBarItemTemplateSelector>
    </Window.Resources>

    <DockPanel LastChildFill="True">

        <fluent:Ribbon x:Name="ribbon" AutomaticStateManagement="True" DockPanel.Dock="Top"
                       SelectedTabIndex="{Binding SelectedRibbonTab, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
            <fluent:Ribbon.Menu>
                <fluent:Backstage >
                    <fluent:BackstageTabControl>
                        <fluent:Button Header="Add Account" Command="{Binding ShowAccountSettingsCommand}"
                                       Icon="{StaticResource AddConnectionIcon}" 
                                       KeyTip="A"/>

                        <fluent:BackstageTabItem Header="About">
                            <views:AboutView />
                        </fluent:BackstageTabItem>

                        <fluent:SeparatorTabItem />

                        <fluent:Button Header="Exit" Command="{Binding ExitCommand}"
                                       Icon="{StaticResource ExitIcon}"
                                       KeyTip="X"/>
                    </fluent:BackstageTabControl>
                </fluent:Backstage>
            </fluent:Ribbon.Menu>

            <fluent:RibbonTabItem Header="Home" KeyTip="H" IsSelected="True">
                <!--<fluent:RibbonGroupBox Header="Account" KeyTip="A"
                                       IsEnabled="{Binding Connection, Converter={StaticResource isNotNullToBooleanConverter}}">
                    <fluent:Button Header="Edit" Command="{Binding Connection.EditConnectionCommand}" />
                    <fluent:Button Header="Remove" Command="{Binding Connection.RemoveConnectionCommand}" />
                </fluent:RibbonGroupBox>-->


                <fluent:RibbonGroupBox KeyTip="C" x:Name="Clipboard"
                                       Header="Clipboard" TabIndex="0">

                    <fluent:Button Header="Paste" 
                                   KeyTip="V"
                                   Command="Paste"
                                   LargeIcon="{StaticResource PasteIcon}"
                                   Icon="{StaticResource PasteIcon}"
                                   FocusManager.IsFocusScope="True">
                        <fluent:Button.ToolTip>
                            <fluent:ScreenTip Title="Paste (Ctrl+V)"
                                              Text="Paste the contents of the Clipboard."
                                              DisableReason="Enable it do use this function"
                                              Width="190" />
                        </fluent:Button.ToolTip>
                    </fluent:Button>

                    <fluent:Button x:Name="cutButton"
                                   KeyTip="X"
                                   Header="Cut"
                                   Icon="{StaticResource CutIcon}"
                                   SizeDefinition="Middle,Small"
                                   Command="Cut"
                                   FocusManager.IsFocusScope="True">
                        <fluent:Button.ToolTip>
                            <fluent:ScreenTip Title="Cut (Ctrl+X)"
                                              Text="Cut the contents to the Clipboard."
                                              DisableReason="Cut is currently not available."
                                              Width="190" />
                        </fluent:Button.ToolTip>
                    </fluent:Button>
                    <fluent:Button x:Name="copyButton"
                                   KeyTip="C"
                                   Header="Copy"
                                   Icon="{StaticResource CopyIcon}"
                                   Command="Copy"
                                   SizeDefinition="Middle,Small"
                                   FocusManager.IsFocusScope="True">
                        <fluent:Button.ToolTip>
                            <fluent:ScreenTip Title="Copy (Ctrl+C)"
                                              Text="Copy the contents to the Clipboard."
                                              DisableReason="Copy is currently not available."
                                              Width="190"/>
                        </fluent:Button.ToolTip>
                    </fluent:Button>
                    <fluent:Button x:Name="findButton"
                                   KeyTip="F"
                                   Header="Find"
                                   Command="ApplicationCommands.Find"
                                   Icon="{StaticResource SearchIcon}"
                                   SizeDefinition="Middle,Small"
                                   FocusManager.IsFocusScope="True">
                        <fluent:Button.ToolTip>
                            <fluent:ScreenTip Title="Find (Ctrl+F)"
                                              Text="Find text in the content."
                                              DisableReason="Find is currently not available."
                                              Width="190"/>
                        </fluent:Button.ToolTip>
                    </fluent:Button>

                </fluent:RibbonGroupBox>


                <fluent:RibbonGroupBox KeyTip="D" x:Name="Documents" Header="Documents"
                                       Visibility="{Binding IsTabDocumentsVisible, Mode=TwoWay, Converter={StaticResource boolToVisibilityConverter}}">

                    <fluent:Button Header="Save"
                                   SizeDefinition="Large"
                                   Command="{Binding SelectedTab.SaveDocumentCommand}"
                                   LargeIcon="{StaticResource SaveDocumentIcon}"/>

                    <fluent:Button Header="Discard"
                                   SizeDefinition="Large"
                                   Command="{Binding SelectedTab.DiscardCommand}"
                                   LargeIcon="{StaticResource DiscardIcon}"/>

                    <fluent:Button Header="New Document"
                                   SizeDefinition="Middle,Small"
                                   Command="{Binding SelectedTab.NewDocumentCommand}"
                                   Icon="{StaticResource NewDocumentIcon}" />

                    <fluent:Button Header="Delete Document"
                                   Command="{Binding SelectedTab.DeleteDocumentCommand}"
                                   SizeDefinition="Middle,Small">
                        <fluent:Button.Icon>
                            <TextBlock Style="{StaticResource DeleteIcon}" />
                        </fluent:Button.Icon>
                    </fluent:Button>

                    <fluent:Button Header="Export"
                                   Command="{Binding SelectedTab.SaveLocalCommand}"
                                   SizeDefinition="Middle,Small">
                        <fluent:Button.Icon>
                            <TextBlock Style="{StaticResource IconText}" Text="&#xE78C;" />
                        </fluent:Button.Icon>
                    </fluent:Button>


                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox KeyTip="S" Header="{Binding SelectedTab.Title}"
                                       Visibility="{Binding IsSettingsTabVisible, Mode=TwoWay, Converter={StaticResource boolToVisibilityConverter}}">

                    <fluent:Button Header="Save"
                                   SizeDefinition="Large"
                                   Command="{Binding SelectedTab.SaveCommand}"
                                   LargeIcon="{StaticResource SaveDocumentIcon}"/>

                    <fluent:Button Header="Discard"
                                   SizeDefinition="Large"
                                   Command="{Binding SelectedTab.DiscardCommand}" 
                                   LargeIcon="{StaticResource DiscardIcon}" />

                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox KeyTip="S" Header="{Binding SelectedTab.Title}"
                                       Visibility="{Binding IsAssetTabVisible, Mode=TwoWay, Converter={StaticResource boolToVisibilityConverter}}">

                    <fluent:Button Header="Save"
                                   SizeDefinition="Large"
                                   Command="{Binding SelectedTab.SaveCommand}"
                                   LargeIcon="{StaticResource SaveDocumentIcon}" />

                    <fluent:Button Header="Discard"
                                   SizeDefinition="Large"
                                   Command="{Binding SelectedTab.DiscardCommand}" 
                                   LargeIcon="{StaticResource DiscardIcon}" />

                    <fluent:Button Header="Delete"
                                   Command="{Binding SelectedTab.DeleteCommand}"
                                   SizeDefinition="Large">
                        <fluent:Button.LargeIcon>
                            <TextBlock Style="{StaticResource DeleteIcon}" FontSize="32" />
                        </fluent:Button.LargeIcon>
                    </fluent:Button>
                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox KeyTip="Q" Header="Query"
                                       Visibility="{Binding IsQueryTabVisible, Mode=TwoWay, Converter={StaticResource boolToVisibilityConverter}}">

                    <fluent:Button Header="Run"
                                   Command="{Binding SelectedTab.ExecuteCommand}"
                                   SizeDefinition="Large">
                        <fluent:Button.LargeIcon>
                            <TextBlock Style="{StaticResource IconText}" Text="&#xE768;" FontSize="32" />
                        </fluent:Button.LargeIcon>
                    </fluent:Button>

                    <fluent:Button Header="Export"
                                   Command="{Binding SelectedTab.SaveLocalCommand}"
                                   SizeDefinition="Large">
                        <fluent:Button.LargeIcon>
                            <TextBlock Style="{StaticResource IconText}" Text="&#xE78C;" FontSize="32" />
                        </fluent:Button.LargeIcon>
                    </fluent:Button>
                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox KeyTip="Q" Header="Import"
                                       Visibility="{Binding IsImportTabVisible, Mode=TwoWay, Converter={StaticResource boolToVisibilityConverter}}">

                    <fluent:Button Header="Run"
                                   Command="{Binding SelectedTab.ExecuteCommand}"
                                   SizeDefinition="Large">
                        <fluent:Button.LargeIcon>
                            <TextBlock Style="{StaticResource IconText}" Text="&#xE768;" FontSize="32" />
                        </fluent:Button.LargeIcon>
                    </fluent:Button>

                    <fluent:Button Header="Open Document"
                                   Command="{Binding SelectedTab.OpenFileCommand}"
                                   SizeDefinition="Large">
                        <fluent:Button.LargeIcon>
                            <TextBlock Style="{StaticResource IconText}" Text="&#xE8E5;" FontSize="32" />
                        </fluent:Button.LargeIcon>
                    </fluent:Button>
                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox KeyTip="X" Header="Settings"
                                       Visibility="{Binding IsQuerySettingsVisible, Mode=TwoWay, Converter={StaticResource boolToVisibilityConverter}}">
                    <fluent:CheckBox Header="Hide System Properties" IsChecked="{Binding SelectedTab.HideSystemProperties, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <fluent:CheckBox Header="Enable Scan In Query" 
                                     IsChecked="{Binding SelectedTab.EnableScanInQuery, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                     IsEnabled="{Binding SelectedTab.EnableScanInQuery, Converter={StaticResource nullToEnabledConverter}}" />
                    <fluent:CheckBox Header="Enable Cross Partition Query" 
                                     IsChecked="{Binding SelectedTab.EnableCrossPartitionQuery, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                     IsEnabled="{Binding SelectedTab.EnableScanInQuery, Converter={StaticResource nullToEnabledConverter}}" />
                </fluent:RibbonGroupBox>

            </fluent:RibbonTabItem>

            <fluent:RibbonTabItem Header="Connections" Group="{Binding ElementName=tabTools, Mode=OneWay}">

                <fluent:RibbonGroupBox KeyTip="T" x:Name="Treeview" Header="Content" TabIndex="0">
                    <fluent:Button Command="{Binding RefreshCommand}"
                                   Header="Refresh">
                        <fluent:Button.Icon>
                            <TextBlock Style="{StaticResource RefreshIcon}" />
                        </fluent:Button.Icon>
                        <fluent:Button.LargeIcon>
                            <TextBlock Style="{StaticResource RefreshIcon}" FontSize="32" />
                        </fluent:Button.LargeIcon>
                    </fluent:Button>

                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox Header="Database" KeyTip="D" TabIndex="1"
                                       IsEnabled="{Binding Database, Converter={StaticResource isNotNullToBooleanConverter}}">
                    <fluent:Button Header="New" 
                                   Command="{Binding Database.AddNewCollectionCommand}"
                                   LargeIcon="{StaticResource DatabaseIcon}"/>

                    <fluent:Button Header="Delete" 
                                   Command="{Binding Database.DeleteDatabaseCommand}">
                        <fluent:Button.LargeIcon>
                            <TextBlock Style="{StaticResource DeleteIcon}" FontSize="32" />
                        </fluent:Button.LargeIcon>
                    </fluent:Button>
                </fluent:RibbonGroupBox>


                <fluent:RibbonGroupBox KeyTip="O" x:Name="Collection" TabIndex="2"
                                       Header="Collection"
                                       IsEnabled="{Binding Collection, Converter={StaticResource isNotNullToBooleanConverter}}">

                    <fluent:SplitButton x:Name="CreateButton"
                                        KeyTip="A"
                                        Header="Add Item"
                                        LargeIcon="{StaticResource CreateIcon}"
                                        SizeDefinition="Large">
                        <fluent:MenuItem Header="Stored Procedure" Icon="{StaticResource StoredProcedureIcon}" Command="{Binding Collection.NewStoredProcedureCommand}" />
                        <fluent:MenuItem Header="User Definied Function" Icon="{StaticResource UdfIcon}" Command="{Binding Collection.NewUdfCommand}" />
                        <fluent:MenuItem Header="Trigger" Icon="{StaticResource TriggerIcon}" Command="{Binding Collection.NewTriggerCommand}"/>

                    </fluent:SplitButton>

                    <fluent:Button Header="SQL Query" 
                                   Icon="{StaticResource SqlQueryIcon}" 
                                   SizeDefinition="Middle,Small"
                                   Command="{Binding Collection.OpenSqlQueryCommand}"
                                   KeyTip="Q"/>

                    <fluent:Button Header="Import" x:Name="ImportDocuments"
                                   Command="{Binding Collection.OpenImportDocumentCommand}"
                                   SizeDefinition="Middle,Small"
                                   KeyTip="I">
                        <fluent:Button.Icon>
                            <TextBlock Style="{StaticResource ImportDocumentIcon}" />
                        </fluent:Button.Icon>
                    </fluent:Button>

                    <fluent:SplitButton KeyTip="D" Header="Delete"
                                        SizeDefinition="Middle,Small">
v

                        <fluent:MenuItem Header="Delete Collection" 
                                   Command="{Binding Collection.DeleteCollectionCommand}">
                            <fluent:MenuItem.Icon>
                                <TextBlock Style="{StaticResource DeleteIcon}" />
                            </fluent:MenuItem.Icon>
                        </fluent:MenuItem>

                        <fluent:MenuItem Header="Remove All Documents" 
                                   Icon="{StaticResource RemoveAllIcon}" 
                                   Command="{Binding Collection.ClearAllDocumentsCommand}"
                                   />

                    </fluent:SplitButton>

                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox Header="Users" KeyTip="U" TabIndex="3"
                                       IsEnabled="{Binding Users, Converter={StaticResource isNotNullToBooleanConverter}}">

                    <fluent:Button Header="Add User" 
                                   Command="{Binding Users.AddUserCommand}"
                                   LargeIcon="{StaticResource UserIcon}">
                    </fluent:Button>
                        

                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox Header="Permissions" KeyTip="U" TabIndex="3"
                                       IsEnabled="{Binding UserNode, Converter={StaticResource isNotNullToBooleanConverter}}">

                    <fluent:Button Header="Add Permission" 
                                   Command="{Binding UserNode.AddPermissionCommand}"
                                   LargeIcon="{StaticResource PermissionIcon}">
                    </fluent:Button>


                </fluent:RibbonGroupBox>


            </fluent:RibbonTabItem>


        </fluent:Ribbon>

        <fluent:StatusBar DockPanel.Dock="Bottom" VerticalAlignment="Center" 
                          ItemsSource="{Binding SelectedTab.StatusBarItems}"
                          ItemTemplateSelector="{StaticResource statusBarItemTemplateSelector}"
                          UsesItemContainerTemplate="False" >
            <fluent:StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <DockPanel LastChildFill="False" />
                </ItemsPanelTemplate>
            </fluent:StatusBar.ItemsPanel>
            <fluent:StatusBar.ItemContainerStyle>
                <Style TargetType="fluent:StatusBarItem">
                    <Setter Property="DockPanel.Dock" Value="{Binding Dock}" />
                </Style>
            </fluent:StatusBar.ItemContainerStyle>

        </fluent:StatusBar>

        <xcad:DockingManager DocumentsSource="{Binding Tabs}"
                             AnchorablesSource="{Binding Tools}"
                             ActiveContent="{Binding SelectedTab, Mode=TwoWay, Converter={StaticResource ActiveDocumentConverter}}"
                             LayoutItemTemplateSelector="{StaticResource tabContentTemplateSelector}"
                             DocumentHeaderTemplateSelector="{StaticResource documentHeaderTemplateSelector}">

            <xcad:DockingManager.LayoutItemContainerStyleSelector>
                <pane:PaneStyleSelector>
                    <pane:PaneStyleSelector.ToolStyle>
                        <Style TargetType="{x:Type xcad:LayoutAnchorableItem}">
                            <Setter Property="Title" Value="{Binding Model.Header}" />
                            <Setter Property="Visibility" Value="{Binding Model.IsVisible, Mode=TwoWay, Converter={StaticResource DockBoolToVisibilityConverter}, ConverterParameter={x:Static Visibility.Hidden}}"/>
                            <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
                            <Setter Property="IsSelected" Value="{Binding Model.IsSelected, Mode=TwoWay}"/>
                            <Setter Property="IsActive" Value="{Binding Model.IsActive, Mode=TwoWay}" />
                            <Setter Property="CanHide" Value="False" />
                        </Style>
                    </pane:PaneStyleSelector.ToolStyle>
                    <pane:PaneStyleSelector.DocumentStyle>
                        <Style TargetType="{x:Type xcad:LayoutItem}">
                            <Setter Property="Title" Value="{Binding Model.Header}"/>
                            <Setter Property="ToolTip" Value="{Binding Model.ToolTip}"/>
                            <Setter Property="CloseCommand" Value="{Binding Model.CloseCommand}"/>
                            <Setter Property="IconSource" Value="{Binding Model.IconSource}"/>
                            <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
                            <Setter Property="IsSelected" Value="{Binding Model.IsSelected, Mode=TwoWay}"/>
                            <Setter Property="IsActive" Value="{Binding Model.IsActive, Mode=TwoWay}" />
                        </Style>
                    </pane:PaneStyleSelector.DocumentStyle>
                </pane:PaneStyleSelector>
            </xcad:DockingManager.LayoutItemContainerStyleSelector>

            <xcad:LayoutRoot x:Name="_layoutRoot">
                <xcad:LayoutPanel Orientation="Horizontal">
                    <xcad:LayoutAnchorablePane Name="Connections" DockWidth="200" FloatingWidth="200" />
                    <xcad:LayoutDocumentPane />
                </xcad:LayoutPanel>
            </xcad:LayoutRoot>

        </xcad:DockingManager>

    </DockPanel>
</fluent:RibbonWindow>
